import "org/killbill/billing/util/entity/dao/EntitySqlDao.sql.stg"

tableName() ::= "invoices"
historyTableName() ::= "invoice_history"

tableFields(prefix) ::= <<
  <prefix>account_id
, <prefix>invoice_date
, <prefix>target_date
, <prefix>currency
, <prefix>status
, <prefix>migrated
, <prefix>parent_invoice
, <prefix>grp_id
, <prefix>created_by
, <prefix>created_date
>>

tableValues() ::= <<
  :accountId
, :invoiceDate
, :targetDate
, :currency
, :status
, :migrated
, :parentInvoice
, :grpId
, :createdBy
, :createdDate
>>

extraTableFieldsWithComma(prefix) ::= <<
, <prefix>record_id as invoice_number
>>

getInvoicesBySubscription() ::= <<
  SELECT <allTableFields("i.")>
  FROM <tableName()> i
  JOIN invoice_items ii ON i.id = ii.invoice_id
  WHERE ii.subscription_id = :subscriptionId AND i.migrated = FALSE
  <AND_CHECK_TENANT("i.")>
  <AND_CHECK_TENANT("ii.")>
  ;
>>

getInvoiceIdByPaymentId() ::= <<
  SELECT i.id
    FROM <tableName()> i, invoice_payments ip
   WHERE ip.invoice_id = i.id
     AND ip.payment_id = :paymentId
   <AND_CHECK_TENANT("i.")>
   <AND_CHECK_TENANT("ip.")>
>>


getInvoiceByInvoiceItemId() ::= <<
  SELECT <allTableFields(("i."))>
  FROM <tableName()> i
  INNER JOIN invoice_items items ON items.invoice_id = i.id
  WHERE items.id = :invoiceItemId
  <AND_CHECK_TENANT("i.")>
  <AND_CHECK_TENANT("items.")>
  ;
>>

updateStatusAndTargetDate() ::= <<
    UPDATE <tableName()>
    SET status = :status, target_date = :targetDate
    WHERE id = :id
    <AND_CHECK_TENANT("")>;
>>

getParentDraftInvoice() ::= <<
  SELECT <allTableFields("")>
    FROM <tableName()>
   WHERE account_id = :accountId
     AND status = 'DRAFT'
   <AND_CHECK_TENANT("")>
   <defaultOrderBy("")>
>>

getInvoiceByAccountRecordIdAfter() ::= <<
  SELECT <allTableFields("")>
    FROM <tableName()>
   where <accountRecordIdField("")> = :accountRecordId
     AND target_date >= :targetDate
     <andCheckSoftDeletionWithComma("")>
   <AND_CHECK_TENANT("")>
   <defaultOrderBy("")>
>>

invoiceBalanceQuery() ::= <<
SELECT
      x.invoice_id
    , x.tenant_record_id
    , SUM(x.amount) as balance
FROM (
    SELECT
          i.id as invoice_id
        , i.tenant_record_id
        , 0 as amount
    FROM invoices i
    WHERE
        <CHECK_TENANT("i.")>

    UNION ALL

    SELECT
          ii.invoice_id
        , ii.tenant_record_id
        , CASE WHEN inv.status in ('DRAFT', 'VOID') OR inv.migrated = true OR tg.tag_definition_id = '00000000-0000-0000-0000-000000000004' THEN 0 ELSE SUM(ii.amount) END as amount
 FROM invoice_items ii
    JOIN invoices inv ON ii.invoice_id = inv.id
    LEFT OUTER JOIN tags tg ON ii.invoice_id = tg.object_id
    WHERE
        <CHECK_TENANT("ii.")>

    GROUP BY
          ii.invoice_id
        , ii.tenant_record_id
        , inv.status
        , inv.migrated
        , tg.tag_definition_id

    UNION ALL

    SELECT
          invoice_id
        , payments_and_refunds.tenant_record_id
        , CASE WHEN inv.status in ('DRAFT', 'VOID') OR inv.migrated = true OR tg.tag_definition_id = '00000000-0000-0000-0000-000000000004' THEN 0 ELSE -payments_and_refunds.amount_paid - payments_and_refunds.amount_refunded END as amount
    FROM (
        SELECT
              ip.invoice_id
            , ip.tenant_record_id
            , SUM(CASE WHEN ip.type = 'ATTEMPT' THEN ip.amount ELSE 0 END) AS amount_paid
            , SUM(CASE WHEN ip.type IN ('REFUND', 'CHARGED_BACK') THEN ip.amount ELSE 0 END) AS amount_refunded
        FROM
            invoice_payments ip
        WHERE
            ip.status = 'SUCCESS'
            <AND_CHECK_TENANT("ip.")>
        GROUP BY
              ip.invoice_id
            , ip.tenant_record_id
    ) AS payments_and_refunds
    JOIN invoices inv ON payments_and_refunds.invoice_id = inv.id
    LEFT OUTER JOIN tags tg ON payments_and_refunds.invoice_id = tg.object_id
) x
GROUP BY
      x.invoice_id
    , x.tenant_record_id
>>

searchInvoicesByBalance(ordering, comparisonOperator) ::= <<
select
  <allTableFields("i.")>, t.balance
from (<invoiceBalanceQuery()>) t
join invoices i ON i.id = t.invoice_id
where t.balance <comparisonOperator> :balance
<AND_CHECK_TENANT("t.")>
order by <recordIdField("i.")> <ordering>
limit :rowCount offset :offset
;
>>

getSearchInvoicesByBalanceCount(comparisonOperator) ::= <<
select
  count(1) as count
from (<invoiceBalanceQuery()>) t
where t.balance <comparisonOperator> :balance
<AND_CHECK_TENANT("t.")>
;
>>
